using System.Reflection;
using MerchStore.Application;
using MerchStore.Infrastructure;
using MerchStore.Infrastructure.Persistence;
//using MerchStore.WebUI.Services;
using Microsoft.AspNetCore.Authentication.Cookies;
using Microsoft.EntityFrameworkCore;
using Microsoft.OpenApi.Models;
using MerchStore.WebUI.Authentication.ApiKey;
using MerchStore.WebUI.Infrastructure;
using System.Text.Json.Serialization; // F칬r Json-konvertering




// Skapa en WebApplicationBuilder som 칛r startpunkten f칬r att konfigurera applikationen
var builder = WebApplication.CreateBuilder(args);

    // 游댏 L칛gg till API-nyckel-autentisering
    builder.Services.AddAuthentication()
        .AddApiKey(builder.Configuration["ApiKey:Value"] 
        ?? throw new InvalidOperationException("API Key is not configured in appsettings."));

    // 游댏 L칛gg till en policy som kr칛ver att man 칛r autentiserad via v친r API-nyckel
    builder.Services.AddAuthorization(options =>
    {
        options.AddPolicy("ApiKeyPolicy", policy =>
            policy.AddAuthenticationSchemes(ApiKeyAuthenticationDefaults.AuthenticationScheme)
                .RequireAuthenticatedUser());
    });


    




// L칛gg till MVC-st칬d med Controllers och Views
builder.Services.AddControllersWithViews();

// Konfigurera cookie-baserad autentisering
// Detta s칛tter upp cookies som mekanismen f칬r att h친lla anv칛ndare inloggade
builder.Services.AddAuthentication(CookieAuthenticationDefaults.AuthenticationScheme)
    .AddCookie(options =>
    {
        // S칬kv칛g d칛r anv칛ndare omdirigeras om de inte 칛r inloggade
        options.LoginPath = "/Account/Login";
        
        // S칬kv칛g d칛r anv칛ndare skickas vid utloggning
        options.LogoutPath = "/Account/Logout";
        
        // S칬kv칛g d칛r anv칛ndare skickas om de saknar beh칬righet
        options.AccessDeniedPath = "/Account/AccessDenied";
        
        // HttpOnly f칬rhindrar att JavaScript f친r 친tkomst till cookien (s칛kerhetsskydd)
        options.Cookie.HttpOnly = true;
        
        // Hur l칛nge cookie/inloggning 칛r giltig
        options.ExpireTimeSpan = TimeSpan.FromMinutes(30);
        
        // F칬rl칛ng livstiden varje g친ng anv칛ndaren interagerar med sidan
        options.SlidingExpiration = true;
    });

// Konfigurera auktorisering med rollbaserade policyer
builder.Services.AddAuthorization(options =>
{
    // Skapa en policy som kr칛ver Admin-rollen
    options.AddPolicy("AdminOnly", policy => policy.RequireRole("Admin"));
    
    // Skapa en policy som kr칛ver Customer-rollen
    options.AddPolicy("CustomerOnly", policy => policy.RequireRole("Customer"));
});

// Detta registrerar en CORS-policy som till친ter alla dom칛ner, headers och metoder
    builder.Services.AddCors(options =>
    {
        options.AddPolicy("AllowAllOrigins",
            builder =>
            {
                builder.AllowAnyOrigin()  // Vem som helst f친r anropa (丘멆잺 i produktion: begr칛nsa!)
                    .AllowAnyHeader()  // Till친t alla typer av headers
                    .AllowAnyMethod(); // Till친t GET, POST, PUT, DELETE etc
            });
    });

// L칛gg till minnescache f칬r sessioner
builder.Services.AddDistributedMemoryCache();

// Konfigurera sessionshantering (anv칛nds f칬r kundvagn)
builder.Services.AddSession(options =>
{
    // Hur l칛nge en session 칛r aktiv
    options.IdleTimeout = TimeSpan.FromMinutes(30);
    
    // F칬rhindra klientskript fr친n att komma 친t sessionscookien
    options.Cookie.HttpOnly = true;
    
    // Markera cookien som n칬dv칛ndig (f칬r GDPR-samtycke)
    options.Cookie.IsEssential = true;
});

// L칛gg till HttpContextAccessor f칬r att tj칛nster ska kunna komma 친t HTTP-context
builder.Services.AddHttpContextAccessor();

// Registrera kundvagnstj칛nsten f칬r dependency injection
//builder.Services.AddScoped<CartSessionService>();

// Registrera autentiseringstj칛nsten f칬r dependency injection
//builder.Services.AddScoped<AuthService>();

// L칛gg till Application-lagrets tj칛nster (fr친n Application-projektet)
builder.Services.AddApplication();

// L칛gg till Infrastructure-lagrets tj칛nster (fr친n Infrastructure-projektet)
// Inkluderar databaskoppling, repositories, etc.
MerchStore.Infrastructure.DependencyInjection.AddInfrastructure(builder.Services, builder.Configuration);

// Konfigurera st칬d f칬r API-dokumentation
builder.Services.AddEndpointsApiExplorer();

// Update the JSON options configuration to use our custom policy
builder.Services.AddControllersWithViews()
    .AddJsonOptions(options =>
    {
        options.JsonSerializerOptions.PropertyNamingPolicy = new JsonSnakeCaseNamingPolicy(); // f칬r objekt
        options.JsonSerializerOptions.DictionaryKeyPolicy = new JsonSnakeCaseNamingPolicy();   // f칬r dictionaries
        options.JsonSerializerOptions.Converters.Add(new JsonStringEnumConverter());           // g칬r enum till string ist칛llet f칬r siffror
    });


// Add this after other service registrations
builder.Services.AddCors(options =>
{
    options.AddPolicy("AllowAllOrigins",
        builder =>
        {
            builder.AllowAnyOrigin()  // Allow requests from any origin
                   .AllowAnyHeader()  // Allow any headers
                   .AllowAnyMethod(); // Allow any HTTP method
        });
});



// L칛gg till Swagger f칬r API-dokumentation
builder.Services.AddSwaggerGen(options =>
{
    // Grundinformation om API:et
    options.SwaggerDoc("v1", new OpenApiInfo
    {
        Title = "MerchStore API",
        Version = "v1",
        Description = "API for MerchStore product catalog",
        Contact = new OpenApiContact
        {
            Name = "MerchStore Support",
            Email = "support@merchstore.example.com"
        }
    });

    
     


    // Inkludera XML-dokumentation fr친n kodens XML-kommentarer
    var xmlFile = $"{Assembly.GetExecutingAssembly().GetName().Name}.xml";
    var xmlPath = Path.Combine(AppContext.BaseDirectory, xmlFile);
    if (File.Exists(xmlPath))
    {
        options.IncludeXmlComments(xmlPath);
    }
    
        // 游댏 L칛gg till API-nyckel-st칬d i Swagger
    options.AddSecurityDefinition(ApiKeyAuthenticationDefaults.AuthenticationScheme, new OpenApiSecurityScheme
    {
        Description = "Skriv in din API-nyckel h칛r f칬r att testa skyddade endpoints.",
        Name = ApiKeyAuthenticationDefaults.HeaderName, // X-API-Key
        In = ParameterLocation.Header, // Vi skickar nyckeln som en HTTP-header
        Type = SecuritySchemeType.ApiKey,
        Scheme = ApiKeyAuthenticationDefaults.AuthenticationScheme
    });

    // 游댏 Applicera s칛kerhetsfilter f칬r endpoints med [Authorize]
    options.OperationFilter<MerchStore.WebUI.Infrastructure.SecurityRequirementsOperationFilter>();


});

// Program.cs - L칛gg till loggning f칬r anslutningsstr칛ngen
var connectionString = builder.Configuration.GetConnectionString("DefaultConnection");
Console.WriteLine($"Anv칛nder anslutningsstr칛ng: {connectionString}");

//builder.Services.AddInfrastructure(builder.Configuration);

//builder.Configuration.AddUserSecrets<Program>();

// Bygg applikationen med alla konfigurerade tj칛nster
var app = builder.Build();

// Konfigurera middleware f칬r att hantera beg칛rningar och svar
using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    try
    {
        var logger = services.GetRequiredService<ILogger<Program>>();
        logger.LogInformation("F칬rbereder databasinitiering...");
        
        var context = services.GetRequiredService<AppDbContext>();
        
        // Kontrollera anslutningen
        var canConnect = await context.Database.CanConnectAsync();
        logger.LogInformation($"Kan ansluta till databasen: {canConnect}");
        
        if (canConnect)
        {
            // K칬r migrationer
            logger.LogInformation("Applicerar migrationer...");
            await context.Database.MigrateAsync();
            
            // Seeda databasen
            logger.LogInformation("Startar seeding...");
            var seeder = services.GetRequiredService<AppDbContextSeeder>();
            await seeder.SeedAsync();
            logger.LogInformation("Seeding slutf칬rd");
        }
        else
        {
            logger.LogError("Kunde inte ansluta till databasen. Skipping migrations och seeding.");
        }
    }
    catch (Exception ex)
    {
        var logger = services.GetRequiredService<ILogger<Program>>();
        logger.LogError(ex, "Ett fel uppstod vid initiering av databasen.");
    }
}

// Applicera migrationer automatiskt vid uppstart
using (var scope = app.Services.CreateScope())
{
    var services = scope.ServiceProvider;
    try
    {
        var context = services.GetRequiredService<AppDbContext>();
        context.Database.Migrate();
        
        // Seed-databasen efter migrering
        await services.SeedDatabaseAsync();
    }
    catch (Exception ex)
    {
        var logger = services.GetRequiredService<ILogger<Program>>();
        logger.LogError(ex, "Ett fel uppstod vid migrering av databasen.");
    }
}

// Konfigurera HTTP-request-pipelinen baserat p친 milj칬 (utveckling/produktion)
if (!app.Environment.IsDevelopment())
{
    // I produktion, anv칛nd en generisk felsida
    app.UseExceptionHandler("/Home/Error");
    
    // Aktivera HSTS f칬r s칛krare HTTPS-anslutningar
    app.UseHsts();
}
else
{
    // I utvecklingsmilj칬, fyll databasen med testdata
    app.Services.SeedDatabaseAsync().Wait();

    // Aktivera Swagger UI f칬r API-testning i utvecklingsmilj칬
    app.UseSwagger();
    app.UseSwaggerUI(options =>
    {
        options.SwaggerEndpoint("/swagger/v1/swagger.json", "MerchStore API V1");
    });
}


app.UseCors("AllowAllOrigins");

// Omdirigera HTTP-trafik till HTTPS
app.UseHttpsRedirection();

// Aktivera sessionshantering
app.UseSession();

// Konfigurera routing
app.UseRouting();

app.UseCors("AllowAllOrigins");


// Aktivera autentisering (vem anv칛ndaren 칛r)
app.UseAuthentication();

// Aktivera auktorisering (vad anv칛ndaren f친r g칬ra)
app.UseAuthorization();

app.UseStaticFiles();
app.MapControllerRoute(
    name: "default",
    pattern: "{controller=Home}/{action=Index}/{id?}");

// Starta applikationen
app.Run();